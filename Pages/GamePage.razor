@page "/"
@page "/game"
@inject IGameService GameService

<div class="container-fluid game"
     @ref="_container"
     @onkeydown="KeyDown"
     @ontouchstart="TouchStart"
     @ontouchend="TouchEnd"
     @ontouchmove:preventDefault
     unselectable="on"
     onselectstart="return false;"
     tabindex="-1">
    <div class="row justify-content-center">
        <div class="col-auto">
            <div class="row mt-3 align-items-sm-center justify-content-between">
                <div class="col-auto px-0">
                    <h1 class="font-weight-bold mb-0">
                        @Services.GameService.DefaultWinningTileValue
                    </h1>
                </div>
                <div class="col-auto px-0 d-flex align-items-center text-right">
                    <span class="smaller d-block">
                        <span class="touch-screen">
                            @(new MarkupString(Localization.TouchScreenTip))
                        </span>
                        <span class="non-touch-screen">
                            @(new MarkupString(Localization.NonTouchScreenTip))
                        </span>
                    </span>
                </div>
            </div>
            <div class="row mt-1 mb-3 mt-sm-3 align-items-center justify-content-between">
                <div class="col-auto px-0 small">
                    <div class="row">
                        <div class="col">
                            <span class="font-weight-bold">
                                <span class="oi oi-bar-chart"></span>
                                <span>
                                    @Localization.BestScore:
                                </span>
                            </span>
                            <span>
                                @GameService.BestScore
                            </span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <span class="font-weight-bold">
                                <span class="oi oi-target"></span>
                                <span>
                                    @Localization.Score:
                                </span>
                            </span>
                            <span class="mr-1">
                                @GameService.Score
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-auto px-0">
                    <div class="row">
                        <div class="col-auto pr-0">
                            <button class="btn btn-game" @onclick="NewGameAsync">
                                <span class="oi oi-plus mr-1"></span>
                                <span>
                                    @Localization.New
                                </span>
                            </button>
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-game px-3" @onclick="UndoAsync" disabled="@(!GameService.CanGameUndo)">
                                <span class="oi oi-action-undo"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row justify-content-center">
                <GridComponent NewGame="@NewGameAsync"
                               Undo="@UndoAsync"
                               Resume="@ResumeAsync"/>
            </div>
        </div>
    </div>
</div>

@code {
#nullable enable

    private double? _touchStartX, _touchStartY;
    private ElementReference _container;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await _container.FocusAsync();
    }

    private async Task NewGameAsync()
    {
        await GameService.NewGameAsync();
        await _container.FocusAsync();
    }

    private async Task UndoAsync()
    {
        await GameService.UndoAsync();
        await _container.FocusAsync();
    }

    private async Task ResumeAsync()
    {
        GameService.Resume();
        await _container.FocusAsync();
    }

    private async Task KeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
                if (GameService.IsGamePaused)
                    if (GameService.IsGameOver)
                        await GameService.NewGameAsync();
                    else
                        GameService.Resume();
                break;
            case "Backspace":
                await GameService.UndoAsync();
                break;
            case "ArrowUp":
                await GameService.MoveAsync(Direction.Up);
                break;
            case "ArrowRight":
                await GameService.MoveAsync(Direction.Right);
                break;
            case "ArrowDown":
                await GameService.MoveAsync(Direction.Down);
                break;
            case "ArrowLeft":
                await GameService.MoveAsync(Direction.Left);
                break;
        }
    }

    private void TouchStart(TouchEventArgs e)
    {
        if (e.TargetTouches.Length != 1)
            return;

        _touchStartX = e.TargetTouches[0].ClientX;
        _touchStartY = e.TargetTouches[0].ClientY;
    }

    private async Task TouchEnd(TouchEventArgs e)
    {
        if (e.TargetTouches.Length > 0 || !_touchStartX.HasValue)
            return;

        var touchStartX = (double)_touchStartX!;
        var touchStartY = (double)_touchStartY!;
        var touchEndX = e.ChangedTouches[0].ClientX;
        var touchEndY = e.ChangedTouches[0].ClientY;

        var dx = touchEndX - touchStartX;
        var dy = touchEndY - touchStartY;
        var absDx = Math.Abs(dx);
        var absDy = Math.Abs(dy);

        if (Math.Max(absDx, absDy) > 10)
            if (absDx > absDy)
                if (dx > 0)
                    await GameService.MoveAsync(Direction.Right);
                else
                    await GameService.MoveAsync(Direction.Left);

            else if (dy > 0)
                await GameService.MoveAsync(Direction.Down);
            else
                await GameService.MoveAsync(Direction.Up);

        _touchStartX = _touchStartY = null;
    }

}